server.port=8100

spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/testdb?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.datasource.hikari.username=testuser
spring.datasource.hikari.password=bitc1234
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.allow-pool-suspension=true

# JPA란
# 스프링프레임워크에서 데이터베이스를 쉽게 활용할 수 있도록 도와주는 MyBatis와 같은 ORM
# JPA (Java Presistence API) : 자바 객체와 데이터베이스 ㅌ이블 간의 매핑을 처리하는 ORM 기술의 표준
# 마이바티스는 데이터베이스 테이블을 기준으로 자바 객체와 연동  
# JPA는 자바 객체를 기준으로 데이터베이스의 테이블과 연동(생성, 수정, 삭제)
# 장점 : 웹 어프리케이션에서 반복적으로 사용하는 기본적인 CRUD의 SQL을 직접 작성하지 않아도 됨, 데이터베이스에 독립적인 개발이 가능함, 데이터 베이스 테이블의 변경이 있을 겨우 DB객체만 수정하면 됨
# 단점 : JPA를 따로 학습해야함, 특정 DB의 기능을 사용할 수 없음, 객체지향 설계가 반드시 필요함 

#JPA 설정
# jpa가 사용할 DB의 종류를 선택
spring.jpa.database=mysql

#Mysql의 엔진 종류를 선택
# 현재 Mysql은 거의 모두 InnoDB를 사용함
# Jpa에서 Mysql을 사용 시 기본값이 MyISAM임
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# Jpa의 엔티티 연관 관계를 바탕으로 자동 실행
# 실제 개발환경에서는 false로 설정해야 함
spring.jpa.generate-ddl=true

# 서버 동작시 jpa 구현체를 통한 DDL 생성옵션
# none : 아무것도 실행하지 않음
# create-drop : SessionFactory가 시작될 때 Drop 및 create 수행하고 SessionFactory 종료 될 때 DB를 Drop
# create  : SessionFactory가 시작될 때 DB를 Drop하고 생성된 DDL을 실행
# update : DB의 변경된 내용만 적용
# validate : DB의 변경된 곳이 있을 경우 변경된 부분을 출력하고 프로그램 종료
spring.jpa.hibernate.ddl-auto=none

# jpa 명령어를 콘솔에 출력
spring.jpa.show-sql=true

# 하이버네이트의 새로운 ID 생성 옵션 사용여부 설정
# mysql의 ai 옵션을 사용할 것이므로 false 로 설정
spring.jpa.hibernate.use-new-id-generator-mappings=false

# 스프링에서 RESTful 방식을 사용 시 method가 PUT, DELETE인 것을 사용하기 위해서 설정
spring.mvc.hiddenmethod.filter.enabled=true